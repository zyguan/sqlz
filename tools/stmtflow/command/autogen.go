package command

import (
	"fmt"
	"io"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"
)

func AutoGen() *cobra.Command {
	var opts struct {
		Write bool
	}
	cmd := &cobra.Command{
		Use:           "gen <dir>",
		Short:         "Generate test manifest",
		SilenceErrors: true,
		Args:          cobra.ExactArgs(1),
		RunE: func(cmd *cobra.Command, args []string) error {
			var out io.Writer = os.Stdout
			if opts.Write {
				f, err := os.OpenFile(filepath.Join(args[0], genTestsFile), os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
				if err != nil {
					return err
				}
				defer f.Close()
				out = io.MultiWriter(os.Stdout, f)
			}

			fmt.Fprintln(out, "# DO NOT EDIT. auto-generated by stmtflow.\n{")
			defer fmt.Fprintln(out, "}")

			files, err := filepath.Glob(args[0] + "*" + stdTestExt)
			if err != nil {
				return err
			}
			for _, testPath := range files {
				for _, resPath := range []string{
					resultPathForJson(testPath),
					resultPathForText(testPath),
				} {
					if fi, err := os.Stat(resPath); err != nil || fi.IsDir() {
						continue
					}
					base, _ := splitTestExt(testPath)
					fmt.Fprintf(out, `  "%s": { test: std.native("parseSQL")(importstr "%s"), expect: import "%s" },`+"\n",
						base, filepath.Base(testPath), filepath.Base(resPath))
					break
				}
			}
			return nil
		},
	}
	cmd.Flags().BoolVarP(&opts.Write, "write", "w", false, "write to file")

	return cmd
}
